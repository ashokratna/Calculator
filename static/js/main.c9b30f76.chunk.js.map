{"version":3,"sources":["Calculator.js","component/Button.js","serviceWorker.js","index.js"],"names":["Calculator","props","reset","setState","current","previous","nextIsReset","addToCurrent","symbol","indexOf","state","push","calculate","length","eval","String","buttons","cols","action","this","className","type","value","map","btn","i","key","Component","Button","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c9b30f76.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport Button from './component/Button';\r\nimport './css/style.css'\r\nclass Calculator extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            current: '0',\r\n            previous: [],\r\n            nextIsReset : false    \r\n        }\r\n    }\r\n\r\n    reset = () => {\r\n        this.setState({current: '0', previous: [], nextIsReset: false});\r\n    }\r\n\r\n    addToCurrent = (symbol) =>{\r\n        if([\"/\",\"-\",\"+\",\"*\"].indexOf(symbol) > -1){\r\n            let {previous} = this.state;\r\n            previous.push(this.state.current + symbol);\r\n            this.setState({previous, nextIsReset : true});\r\n        }else{\r\n            if((this.state.current === \"0\" && symbol !== \".\") || this.state.nextIsReset){\r\n                this.setState({current: symbol, nextIsReset: false});\r\n            }else{\r\n                this.setState({current: this.state.current + symbol});\r\n            }\r\n            \r\n        }        \r\n    }\r\n\r\n    calculate = (symbol) => {\r\n        let {current, previous, nextIsReset} = this.state;\r\n        if(previous.length >0){\r\n            current = eval(String(previous[previous.length - 1] + current));\r\n            this.setState({current, previous: [], nextIsReset: true});\r\n        }\r\n    }\r\n\r\n\r\n    render() { \r\n        const buttons =[\r\n            {symbol: 'C', cols: 3, action: this.reset},\r\n            {symbol: '/', cols: 1, action: this.addToCurrent},\r\n            {symbol: '7', cols: 1, action: this.addToCurrent},\r\n            {symbol: '8', cols: 1, action: this.addToCurrent},\r\n            {symbol: '9', cols: 1, action: this.addToCurrent},\r\n            {symbol: '*', cols: 1, action: this.addToCurrent},\r\n            {symbol: '4', cols: 1, action: this.addToCurrent},\r\n            {symbol: '5', cols: 1, action: this.addToCurrent},\r\n            {symbol: '6', cols: 1, action: this.addToCurrent},\r\n            {symbol: '-', cols: 1, action: this.addToCurrent},\r\n            {symbol: '1', cols: 1, action: this.addToCurrent},\r\n            {symbol: '2', cols: 1, action: this.addToCurrent},\r\n            {symbol: '3', cols: 1, action: this.addToCurrent},\r\n            {symbol: '+', cols: 1, action: this.addToCurrent},\r\n            {symbol: '0', cols: 2, action: this.addToCurrent},\r\n            {symbol: '.', cols: 1, action: this.addToCurrent},\r\n            {symbol: '=', cols: 1, action: this.calculate},\r\n        ];\r\n        return ( \r\n            <div className=\"App\">\r\n                {this.state.previous.length > 0 ? <div className=\"floaty-last\">{this.state.previous[this.state.previous.length - 1]}</div> : null}\r\n                <input className=\"result\" type=\"text\" value={this.state.current} />\r\n                {buttons.map((btn, i) => {\r\n                    return <Button key={i} symbol={btn.symbol} cols={btn.cols} action={(symbol) => btn.action(symbol)} />\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Calculator;","import React, {Component} from 'react';\r\n\r\nclass Button extends Component {\r\n    state = {  }\r\n    render() { \r\n        return ( \r\n            <div className={`column-${this.props.cols}`}>\r\n                <button className=\"cal-button\" onClick={() => this.props.action(this.props.symbol)}>{this.props.symbol}</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Button","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Calculator from './Calculator';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Calculator />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}